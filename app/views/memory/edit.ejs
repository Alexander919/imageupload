<% layout("layouts/boiler") %>

    <h1>Edit memory</h1>
    <form id="edit-form" action="/memory/edit/<%= memory._id %>" method="POST">
        <%# New images upload %>
            <div>
                <label for="title">Title:</label>
                <input type="text" id="title" name="title" value="<%= memory.title %>">

            </div>
            <br>
            <div>
                <!-- TODO: create an element that will show rendered output from this textarea(markdown-it module) -->
                <label for="text">Text:</label>
                <textarea name="text" id="text" cols="30" rows="10"><%= memory.text %></textarea>

            </div>
            <br>
            <div>
                <label for="private">Private memory?</label>
                <input type="checkbox" id="private" name="private" <%= memory.isPrivate ? "checked" : "" %> >

            </div>
            <br>

            <div>
                <label for="fileElem">Add images to upload:</label>
                <!-- <input type="file" id="img" name="images" multiple accept="image/*"> -->
                <br>
                <div>
                    <input type="file" id="fileElem" name="images" multiple accept="image/*" hidden>
                    <a href="#" id="fileSelect">Click to add images</a>
                </div>
                <div id="fileList">
                    <p>No files selected!</p>
                </div>
            </div>
            <br>
            <hr>
            <br>
            <p>Select images to delete</p>
            <%# Images from the database %> 
            <div class="images">
                <%# 'preview' comes from mongoose virtual(see models/image.js) %> 
                <% memory.gallery.forEach(({ _id, path, originalname, size, filename, preview }, i)=> { %>
                    <div class="image">
                        <%# checked elements are added to the 'delete' array %> 
                        <input class="deleteImageCheckbox" type="checkbox" id="image<%= i %>" name="delete[]" value="<%= filename %>" hidden>
                        <%# label is connected to the <input type="checkbox"> When a label is clicked the respective checkbox is checked %>  
                        <label for="image<%= i %>" title="Tap to select/unselect">
                            <ul>
                                <li>Name: <%= originalname %></li>
                                <li>Size: <%= size %></li>
                            </ul>
                            <div>
                                <img src="<%= preview %>">
                                <br>
                            </div>
                        </label>
                    </div>
                <% }) %>
            </div>
            <br>

            <input type="submit" value="Update">
    </form>

    <script type="module">
        import { updateFileInput, setupDisplayImagesToUpload } from "/js/fileimages.js"
        import uploadData from "/js/dataupload.js"

        const fileElem = document.getElementById("fileElem");
        const fileSelect = document.getElementById("fileSelect");
        const fileList = document.getElementById("fileList");

        fileSelect.addEventListener("click", e => {
            e.preventDefault(); // prevent navigation to "#"
            if (fileElem) fileElem.click();
        });

        //setup 'change' event listener on <input type="file">
        setupDisplayImagesToUpload(fileElem, fileList);

        //const form = document.getElementById("edit-form");
        //const obj = { form };
        //fileElem.addEventListener("change", displayImagesToUpload(obj, fileList);

        //form.addEventListener("submit", function(e) {
        //    e.preventDefault();
        //    uploadData(this.formData, this.form.getAttribute("action").slice(1));
        //}.bind(obj));

        document.getElementById("edit-form").addEventListener("submit", function(e) {
            e.preventDefault();

            const formData = updateFileInput(this, fileElem.getAttribute("name"));
            uploadData(formData, this.getAttribute("action").slice(1));
        });
    </script>