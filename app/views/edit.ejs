<% layout("layouts/boiler") %>
    <h1>Edit</h1>

    <form id="editForm" action="/edit" method="POST">
        <%# New images upload %> 
        <div>
            <label for="fileElem">Add images to upload:</label>
            <!-- <input type="file" id="img" name="images" multiple accept="image/*"> -->
            <br>
            <div>
                <input type="file" id="fileElem" name="images" multiple accept="image/*" hidden>
                <a href="#" id="fileSelect">Click to add images</a>
            </div>
            <div id="fileList">
                <p>No files selected!</p>
            </div>
        </div>
        <br>
        <hr>
        <br>
        <p>Select images to delete</p>
        <%# Images from the database %> 
        <div class="images">
            <%# 'preview' comes from mongoose virtual(see models/image.js) %> 
            <% images.forEach(({ _id, path, originalname, size, filename, preview }, i)=> { %>
                <div class="image">
                    <%# checked elements are added to the 'delete' array %> 
                    <input class="deleteImageCheckbox" type="checkbox" id="image<%= i %>" name="delete[]" value="<%= filename %>" hidden>
                    <%# label is connected to the <input type="checkbox"> When a label is clicked the respective checkbox is checked %>  
                    <label for="image<%= i %>" title="Tap to select/unselect">
                        <ul>
                            <li>Name: <%= originalname %></li>
                            <li>Size: <%= size %></li>
                        </ul>
                        <div>
                            <img src="<%= preview %>">
                            <br>
                        </div>
                    </label>
                </div>
            <% }) %>
        </div>
        <br>
        <input type="submit" value="Update">
    </form>

    <script>
        //document.addEventListener("DOMContentLoaded", () => {
        //create a global Map of all Files
        //map: id -> File
        const FilesMap = new Map();

        const fileElem = document.getElementById("fileElem"),
            fileSelect = document.getElementById("fileSelect"),
            fileList = document.getElementById("fileList");

        //register submit event
        //params: (<form id>, <POST path>, [[func to run before fetch], [params to func]])
        createSubmitImageUploadEvent("editForm", "edit", updateFileInput, FilesMap, fileElem);

        //update <input type="file">.files to represent the FilesMap
        function updateFileInput(filesMap, fileElem) {
            const dataTransfer = new DataTransfer();
            FilesMap.forEach(file => dataTransfer.items.add(file));
            //update contents of the file-input element
            fileElem.files = dataTransfer.files;
        }

        fileSelect.addEventListener("click", e => {
            e.preventDefault(); // prevent navigation to "#"
            if (fileElem) fileElem.click();
        });

        //triggered when we 'Open' new images
        fileElem.addEventListener("change", function() {
            //add new Files to FilesMap
            for (let file of this.files) {
                //const id = Array.from({length: 1000000}, () => `${Date.now()}${Math.random().toString(16).slice(2)}`);
                //console.log((new Set(id)).size); //1000000
                //generate unique id(tested with 1 million entries)
                const id = `${Date.now()}${Math.random().toString(16).slice(2)}`;
                FilesMap.set(id, file);
            }

            console.log(FilesMap);

            if (FilesMap.size) {
                const { html } = getImagesHTML(FilesMap);
                fileList.innerHTML = html;
                //If multiple identical EventListeners are registered on the same EventTarget with the same parameters the duplicate instances are discarded. 
                //They do not cause the EventListener to be called twice and since they are discarded they do not need to be removed with the removeEventListener method.
                fileList.querySelectorAll(".delete").forEach(delElement => {
                    delElement.addEventListener("click", function () {
                        const imageEl = this.closest(".image");
                        const id = imageEl.dataset.id;
                        //remove the div with class .image from the DOM
                        imageEl.remove();
                        //on delete modify the global map of Files
                        FilesMap.delete(id);
                    });
                });
            }
        });

        function getImagesHTML(filesMap) {
            //Array.from(Iterable, mapFn)
            html = Array.from(filesMap, ([id, file]) => {
                return `
                <div class="image" data-id="${id}">
                    <span class="delete">&#9851;</span>
                    <div>
                        <ul>
                            <li>Name: ${file.name} </li>
                            <li>Size: ${file.size} </li>
                        </ul>
                        <div>
                            <img height="100" onload="${URL.revokeObjectURL(file.src)}" src="${URL.createObjectURL(file)}">
                            <br>
                        </div>
                    </div>
                </div>
                `;
            });

            return {
                html: `
                <div class="images">
                    ${html.join("\n")}
                </div>`
            };
        }
        //});

    </script>